#!/usr/bin/python

# ***** BEGIN LICENCE BLOCK *****
# This file is part of OTS
#
# Copyright (C) 2010 Nokia Corporation and/or its subsidiary(-ies).
#
# Contact: meego-qa@lists.meego.com
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public License
# version 2.1 as published by the Free Software Foundation.
#
# This library is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
# 02110-1301 USA
# ***** END LICENCE BLOCK *****

"""
Mock for demonstration of OTS Core

Rather crude - deliberately so. 

Kept simple to demonstrate high level behaviour 
and interfaces this is not a replacement for 
the actual testrunning components!

Runs commands as given by the Test Defintion XML 
and sends back a results file.
"""

import os
import time 
import sys
import zipfile
import logging

from xml.etree import ElementTree as ET

from ots.worker.responseclient import ResponseClient

DUMMY_RESULTS_FILENAME = "dummy_results_file.xml"

HOST = "localhost"

LOG = logging.getLogger(__name__)

##############################
# HELPERS
##############################

def _results_xml(filename):
    dirname = os.path.dirname(os.path.abspath(__file__))
    fqname = os.path.join(dirname, "data", filename)
    f = open(fqname, "r")
    return f.read()

def _steps_iter(xml):
    """
    Crude parser of TestDefinition Files
    """
    element = ET.XML(xml)
    for suite in element.findall("suite"):
        for set in suite.findall("set"):
             for case in set.findall("case"):
                 for step in case.findall("step"):
                      yield step.text

def _run_tests(test_definition_xml):
    """
    Executes the test steps from the test_definition_xml
    """
    for step in _steps_iter(test_definition_xml):
        os.system(step)

def _get_test_definition_file(package, testrun_id):
    """
    Get the Test Definition File from the package 
    Send back to ots.distributor
    """
    file = zipfile.ZipFile(package, "r")
    name = file.namelist()[0]
    tdf_xml = file.read(name)
    return (name, tdf_xml)

def _post_results(testrun_id, response_client):
    """
    Send the dummy results back to ots.distributor
    """
    results_xml = _results_xml(DUMMY_RESULTS_FILENAME)
    response_client.add_result(DUMMY_RESULTS_FILENAME, 
                               results_xml)   

#############################
    
def main(package, testrun_id):
    """
    Unpacks the 'package'. Run the tests
    Feed the results file and the test definition file back 
    
    @type fqname: C{string}
    @param fqname: The fully qualified name of the package 
                   (a zipfile for demo purposes) 
    
    @type testrun_id: C{int} 
    @param testrun_id: The id of the testrun    
    """
    LOG.debug("starting ots mock")

    testrun_id = int(testrun_id)    
    response_client = ResponseClient(HOST, testrun_id)
    response_client.connect()
    name, tdf_xml = _get_test_definition_file(package, testrun_id)

    response_client.add_result(name,
                               tdf_xml)

    _run_tests(tdf_xml)
    LOG.debug("posting results")
    _post_results(testrun_id, response_client)
    LOG.debug("finished ots mock")

if __name__ == "__main__":
    main(sys.argv[1], sys.argv[2])
